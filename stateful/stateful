#!/usr/bin/env ruby

$stdout.sync = true
$stderr.sync = true

require 'rubygems'
require 'bundler'
require 'pathname'
require 'socket'
Bundler.require

class Pathname
  def append(s)
    File.open(self.to_s, "a") { |f| f << s }
  end
end

class Stateful < Sinatra::Base
  not_found { "Path #{request.path} is unknown." }

  get '/' do
    return DATA_FILE_PATH.read
  rescue Errno::ENOENT
    return "No data written."
  end

  post '/' do
    request.body.rewind
    DATA_FILE_PATH.append(request.body.read)
    return "Data written."
  end

  put '/' do
    request.body.rewind
    DATA_FILE_PATH.append(request.body.read)
    return "Data written."
  end

  get '/clear' do
    DATA_FILE_PATH.delete
    return "Data cleared."
  end

  get '/list' do
    return `ls #{DATA_FILE_PATH.dirname}`
  end

  get '/identify' do
    return JSON.dump({hostname: Socket.gethostname}) + "\n"
  end

  get '/version' do
    return JSON.dump({version: File.read('VERSION').chomp}) + "\n"
  end
end

STARTUP_DELAY     = ENV.fetch('STARTUP_DELAY',     3).to_i
TERMINATION_DELAY = ENV.fetch('TERMINATION_DELAY', 3).to_i
DATA_FILE_PATH    = Pathname.new(ENV.fetch('DATA_FILE_PATH', "/data/state"))

Signal.trap("TERM") do
  puts "Caught a TERM signal.  Terminating."
  sleep(TERMINATION_DELAY)
  # Suppress exit stacktrace
  $stderr.reopen(IO::NULL)
  $stdout.reopen(IO::NULL)
  exit 3
end

puts "Starting up."
sleep(STARTUP_DELAY)

Stateful.run!(show_exceptions: false,
              raise_errors: true,
              traps: false,
              bind: '0.0.0.0',
              port: (ENV["PORT"] || 80))
